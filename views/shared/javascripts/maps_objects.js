//fires when the system is waiting for data (location data, since this loads the longest by far)
function WaitViewer(vm){

    this.init = function(){
        
        vm.show_info_windows.subscribe( function (){
            if (vm.show_info_windows()){
                $(".viewer").toggle("explode");
            }
            else{
                $(".viewer").toggle("explode");
            }
        });
        
        vm.show_help_windows.subscribe( function (){
            if (vm.show_help_windows()){
                $(".info").toggle("explode");
            }
            else{
                $(".info").toggle("explode");
            }
        });
        
        vm.waiting.subscribe( function (){
            if (vm.waiting()){
                d3.select("#waitWindow")
                    .style("background", "white")
                    .transition()
                    .duration(1000)
                    .style("opacity", 1)
                    .style("background", "green")
                    .transition()
                    .delay(1000)
                    .style("visibility", "visible");
            }
            else {
                d3.select("#waitWindow")
                    .transition()
                    .duration(1000)
                    .style("opacity", 0)
                    .transition()
                    .delay(1000)
                    .style("visibility", "hidden");
            }
        });
    }
}




function MapViewer(vm){
    
    d3.select("waitWindow").style("visibility", "hidden");
    
    // Create the Google Mapâ€¦
    var mapOptions ={
      zoom: 8,
      center: new google.maps.LatLng(52.27, 6.01948),
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      disableDefaultUI: true,
      styles: [
      {
        "featureType": "poi"  },{
        "featureType": "poi",
        "elementType": "labels",
        "stylers": [
          { "visibility": "off" }
        ]
     // },{
     //   "featureType": "landscape",
     //   "stylers": [
     //     { "color": "#F5FFFA" }
     //   ]
      },{
        "featureType": "landscape",
        "elementType": "labels",
        "stylers": [
          { "visibility": "off" }
        ]
      },{
        "featureType": "transit",
        "stylers": [
          { "visibility": "off" }
        ]
      },{
        "featureType": "administrative",
        "elementType": "geometry",
        "stylers": [
          { "visibility": "off" }
        ]
      },{
        "featureType": "road.highway",
        "elementType": "geometry.stroke",
        "stylers": [
          { "visibility": "off" }
        ]
      },{
        "featureType": "road.arterial",
        "elementType": "labels",
        "stylers": [
          { "visibility": "off" }
        ]
      },{
        "featureType": "road.highway",
        "elementType": "geometry.fill",
        "stylers": [
          { "color": "#a1a1a0" },
          { "lightness": 5 }
        ]
      },{
        "featureType": "road.highway",
        "elementType": "labels",
        "stylers": [
          { "visibility": "off" }
        ]
     // }, //{
     //   "featureType": "water",
      //  "stylers": [
      //    { "color": "#ADD8E6" }
     //   ]
      },{
        "featureType": "administrative.country",
        "elementType": "geometry.stroke",
        "stylers": [
          { "visibility": "on" },
          { "color": "#474747" },
          { "gamma": 1.67 }
        ]
      },{
        "featureType": "administrative.province",
        "elementType": "geometry.stroke",
        "stylers": [
          { "visibility": "on" },
          { "color": "#474747" },
          { "gamma": 1.67 }
        ]
        }
    ]};

    var map = new google.maps.Map(d3.select("#map").node(), mapOptions);
    var overlay = new google.maps.OverlayView();

    var locality_data = {};
    var val_max = 0;
    var marker;
    var searchMarkers = [];
    
    var input = /** @type {HTMLInputElement} */(
        document.getElementById('pac-input'));
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

    var searchBox = new google.maps.places.SearchBox(
    /** @type {HTMLInputElement} */(input));

    // Listen for the event fired when the user selects an item from the
    // pick list. Retrieve the matching places for that item.
    google.maps.event.addListener(searchBox, 'places_changed', function() {
    var places = searchBox.getPlaces();

    if (places.length == 0) {
        return;
    }
    for (var i = 0, searchMarker; searchMarker = searchMarkers[i]; i++) {
        searchMarker.setMap(null);
    }

    // For each place, get the icon, place name, and location.
    searchMarkers = [];
    var bounds = new google.maps.LatLngBounds();
    for (var i = 0, place; place = places[i]; i++) {
      var image = {
        url: place.icon,
        size: new google.maps.Size(71, 71),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 34),
        scaledSize: new google.maps.Size(25, 25)
      };

      // Create a marker for each place.
      var searchMarker = new google.maps.Marker({
        map: map,
        icon: image,
        title: place.name,
        position: place.geometry.location
      });

      searchMarkers.push(searchMarker);

      bounds.extend(place.geometry.location);
      
      // Don't zoom in too far on only one marker
      if (bounds.getNorthEast().equals(bounds.getSouthWest())) {
         var extendPoint1 = new google.maps.LatLng(bounds.getNorthEast().lat() + 0.1, bounds.getNorthEast().lng() + 0.1);
         var extendPoint2 = new google.maps.LatLng(bounds.getNorthEast().lat() - 0.1, bounds.getNorthEast().lng() - 0.1);
         bounds.extend(extendPoint1);
         bounds.extend(extendPoint2);
      }
    }

    map.fitBounds(bounds);
    });

    // Bias the SearchBox results towards places that are within the bounds of the
    // current map's viewport.
    google.maps.event.addListener(map, 'bounds_changed', function() {
    var bounds = map.getBounds();
    searchBox.setBounds(bounds);
    });


    object_colors = {   "country":      "yellow",
                        "locality":     "red",
                        "administrative_area_level_1": "purple",
                        "rest":         "black",
                        "collector":    "blue",
                        "creator":      "lightgreen",
                        "ne_locality":  "yellow"};

    function n_decimals(nr, n){
        if (nr){
            return nr.toFixed(n);
        }
        return nr;
    }

    // Add the container when the overlay is added to the map.
    this.init = function(){
        overlay.onAdd = function() {
            var toplayer = d3.select(".zCanvas")
                .append("svg")
                .style("overflow", "visible") //omg
                .attr("class","top_menu");

            var object_layer = d3.select(this.getPanes().overlayMouseTarget) //used to be overlayLayer
                .append("div")
                .attr("class", "objects")
                .append("svg")
                .attr("class","objects")
            
            var ne_locatie_layer = object_layer
                .append("g")
                .attr("class","ne_locaties");

            var locatie_layer = object_layer
                .append("g")
                .attr("class","locaties");

            var creator_layer = object_layer
                .append("g")
                .attr("class","creators");

            var collector_layer = object_layer
                .append("g")
                .attr("class","collectors");

                
            // drop this into global scope
            var projection = this.getProjection(), padding = 10;

            function CalculateStarPoints(arms, multiplier, d){
                outerRadius = ((Math.log(d.values.length) * 2 ) + map.getZoom() + 2);
                innerRadius = ((Math.log(d.values.length / 2 ) * 2 ) + map.getZoom() - 2);

                var results = "";
                var angle = Math.PI / arms;

                for (var i = 0; i < 2 * arms; i++)
                {
                    // Use outer or inner radius depending on what iteration we are in.
                    var r = (i & 1) == 0 ? outerRadius : innerRadius;
                    var currX = Math.cos(i * angle) * r;
                    var currY = Math.sin(i * angle) * r;
                    // Our first time we simply append the coordinates, subsequet times
                    // we append a ", " to distinguish each coordinate pair.
                    if (i == 0){
                        results = currX + "," + currY;
                    }
                    else{ 
                        results += ", " + currX + "," + currY;
                    }
                }
                return results;
            }

            

            function transform2(d) {
                var lat_lon = d.key.split(",");
                if (lat_lon[0] == ""){ 
                    lat_lon = [52.655694, 3.913930];
                    d.nolocation = true;
                    } //somewhere in the water!!
                d.lat_lon = lat_lon;
                x = new google.maps.LatLng(lat_lon[0], lat_lon[1]);
                x = projection.fromLatLngToDivPixel(x);
                d.xwindow = (x.x);
                d.ywindow = (x.y);
                return d3.select(this)
                    .attr("cx", (x.x + 4000) + "px")
                    .attr("cy", (x.y + 4000) + "px");
            }
            
            function transformRect(d, size) {
                size = 10;
                var lat_lon = d.key.split(",");
                if (lat_lon[0] == ""){ lat_lon = [52.655694, 3.913930]} //somewhere in the water!!
                d.lat_lon = lat_lon;
                d = new google.maps.LatLng(lat_lon[0], lat_lon[1]);
                d = projection.fromLatLngToDivPixel(d); 
                return d3.select(this)
                    .attr("x", ((d.x - (size/2)) + 4000) + "px")
                    .attr("y", ((d.y - (size/2)) + 4000) + "px");
            }

            function transformPath(d) {
                var lat_lon = d.key.split(",");
                if (lat_lon[0] == ""){ lat_lon = [52.444694, 3.602930]} //somewhere in the water!!
                d.lat_lon = lat_lon;
                d = new google.maps.LatLng(lat_lon[0], lat_lon[1]);
                d = projection.fromLatLngToDivPixel(d); 
                return d3.select(this)
                    .attr("transform", "translate(" + (d.x + 4000) + "," + (d.y + 4000) + ")");
            }

            function transformxy(lat_lon) {
                x = new google.maps.LatLng(lat_lon[0], lat_lon[1]);
                x = projection.fromLatLngToDivPixel(x);
                return d3.select(this)
                    .attr("cx", (x.x + 4000) + "px")
                    .attr("cy", (x.y + 4000) + "px");
            }
            
            var tooltip = d3.select("body")
                .append("div")
                .style("position", "absolute")
                .style("background", "white")
                .style("z-index", "10")
                .style("visibility", "hidden")
                .text("");

            var info_click_tip = d3.select("#tiptop");
            
            function loaditem(dat){
                vm.getDescription(dat.id); //knockout will pick this up
                info_click_tip
                    .style("visibility", "visible")
                    .select("#popover666")
                    .style("top", (event.pageY-220)+"px")
                    .style("left",(event.pageX-110)+"px");
            }

            function loadmenu(thiz, d, i, pos, org_r){

                pos = typeof pos !== 'undefined' ? pos : 0;
                thiz = typeof thiz !== 'undefined' ? thiz : this;
                org_r = typeof org_r !== 'undefined' ? org_r : d3.select(thiz).attr("r");

                var org_pos = [d3.select(thiz).attr("cx"), d3.select(thiz).attr("cy")];
                var amount = Math.max(Math.round(org_r / 5), 6);
                var deg = 360 / amount;
                var startdeg = 90;
                
                //removing the menu before rebuilding it

                object_layer.selectAll(".menuitems")
                    .selectAll("path")
                    .transition()
                    .duration(function(d, i){
                        return 20 * i;
                    }).remove();
                
                object_layer.selectAll(".menuitems")
                    .selectAll("circle")
                    .transition()
                    .duration(function(d, i){
                        return 20 * i;
                    })
                    .attr("r", 0).remove();
                
                object_layer.select(".menuitems").select(".menucount").remove();
                object_layer.selectAll(".menuitems").transition().delay(200).remove();
                
                //appending menu blobs to the object layer

                var menuitems = object_layer.append("g")
                                .attr("class", "menuitems")
                                .attr('transform', function() { 
                                    return 'translate(' + (parseInt(org_pos[0], 10)) + ',' + (parseInt(org_pos[1], 10)) + ')';
//                                    return 'translate(' + event.pageX + ',' + event.pageY + ')';
                    			});
                                
                //if the calculated amount of items around a circle is larger than the amount of tales in the set, add all 
                if (amount > d.values.length){
                    data = d.values;
                }
                //if the calculated amount of items around a circle is larger than the amount of tales in the slice, add slice
                else if (amount > d.values.slice(pos, (pos + amount)).length){
                    data = d.values.slice(pos, (pos + amount))
                }
                //if the calculated amount of items around a circle is the size of the slice: add the slice minus one item, plus a _NEXT button
                else{
                    data = d.values.slice(pos, (pos + (amount-1)));
                    data.unshift("_NEXT");
                }

                percentage = ((1 / d.values.length) * pos) + 0.000001;
                borderpixels = org_r * percentage;
                
                menuitems
                    .append("circle")
                    .attr('pointer-events', 'none')
                    .attr("class", "location")
                    .attr("fill", object_colors["locality"])
                    .attr("cx", 0)
                    .attr("cy", 0)
                    .attr("r", org_r - (borderpixels / 2))
                    .style("stroke-width", borderpixels + 2 + "px")
                    .style("stroke-style", "solid")
                    .style("stroke", "#990012");

                menuitems
                    .append("text")
                    .attr('pointer-events', 'none')
                    .attr("class", "menucount")
                    .attr("dx", -(((pos + "/" + d.values.length).length * 6) / 2))
                    .attr("dy", 3)
                    .text(pos + "-" + Math.min(pos+amount, d.values.length) + "/" + d.values.length);

                menuitems = menuitems
                    .selectAll(".menuitem")
                    .data(data);
                
                menuitemsenter = menuitems.enter()
                    .append("g")
                    .attr("class", function(dat){
                        if (dat == "_NEXT"){
                            return "bluemenuitem";
                        }
                        return "greenmenuitem";
                    })
                    .attr('transform', function(k, i) { 
                        return 'translate(' + Math.cos(i * 2 * Math.PI / amount) * (Math.max(org_r, 10) + 20) + ',' + Math.sin(i * 2 * Math.PI / amount) * (Math.max(org_r, 10) + 20) + ')';
        			})

                menuitemsenter
        			.append("circle")
        			.attr("r", 1)
                    .transition().duration(function(d, i){
                        return 120 * i;
                    })
                    .attr("r", 20);

                menuitemsenter
        			.append("circle")
        			.attr("r", 1)
        			.on("mouseover", function(d){
                        d3.select(this)
                            .transition()
                            .ease("elastic")
                            .attr("r", 30);
                    })
                    .on("mouseout", function(d){
                        d3.select(this)
                            .transition()
                            .ease("elastic")
                            .attr("r", 20);
                    })
                    .on("click", function(dat){
                        d3.event.preventDefault();
                        if (dat == "_NEXT"){
                            info_click_tip.style("visibility", "hidden");
                            object_layer.selectAll(".menuitems").transition().duration(500).remove();
                            loadmenu(thiz, d, i, (pos + (amount-1)), (org_r));
                        }
                        else{
                            loaditem(dat);
                        }
                        
                    })
                    .transition().duration(function(d, i){
                        return 60 * i;
                    })
                    .attr("r", 20)
                    .attr("opacity", 0);
                
                subgenre_glyphs = {
                    "verhalenkaart": "M295.648-61.664c0.288-0.192 0.672-0.096 0.96-0.288 2.336-1.184 4.768-2.048 7.392-2.048 1.408 0 2.816 0.192 4.224 0.576l347.776 94.912 347.776-94.912c1.408-0.384 2.816-0.576 4.224-0.576 2.624 0 5.056 0.864 7.36 2.080 0.32 0.16 0.672 0.096 0.96 0.288l288 176c6.112 3.744 8.992 11.136 7.040 18.016l-159.488 560c-1.312 4.704-4.736 8.544-9.28 10.432-4.544 1.824-9.632 1.536-13.952-0.832l-158.784-89.088c-7.68-4.32-10.432-14.080-6.112-21.792 4.32-7.744 14.048-10.464 21.824-6.112l141.088 79.2 150.624-528.832-256.48-156.768-60.928 487.392c-1.088 8.8-9.376 14.912-17.888 13.888-8.736-1.088-14.976-9.088-13.888-17.856l61.024-488.288-317.12 86.56v87.36c0 8.832-7.168 16-16 16s-16-7.168-16-16v-87.36l-317.152-86.56 61.024 488.288c1.088 8.768-5.12 16.768-13.888 17.856-8.704 1.024-16.768-5.088-17.888-13.888l-60.896-487.392-256.48 156.736 150.624 528.8 141.088-79.2c7.744-4.288 17.472-1.568 21.824 6.112 4.32 7.712 1.568 17.44-6.112 21.792l-158.816 89.12c-4.256 2.4-9.344 2.72-13.92 0.832-4.544-1.888-7.968-5.696-9.28-10.432l-159.488-560c-1.984-6.912 0.896-14.272 7.040-18.016l287.968-176zM645.152 212.224c3.072-2.816 6.944-4.224 10.848-4.224 3.84 0 7.68 1.376 10.752 4.128 10.656 9.696 261.248 239.648 261.248 475.872 0 152.544-119.456 272-272 272s-272-119.456-272-272c0-232.128 250.496-465.92 261.152-475.776zM656 928c136.8 0 240-103.168 240-240 0-195.104-191.776-394.784-239.904-441.824-48.032 47.584-240.096 249.888-240.096 441.824 0 136.832 103.2 240 240 240zM800 688c0 79.392-64.608 144-144 144s-144-64.608-144-144 64.608-144 144-144 144 64.608 144 144zM656 576c-61.76 0-112 50.24-112 112s50.24 112 112 112 112-50.24 112-112-50.24-112-112-112z",
                    "info": "M554 554.667v86h-84v-86h84zM554 212.667v256h-84v-256h84zM512 852.667q176 0 301-125t125-301-125-301-301-125-301 125-125 301 125 301 301 125z",
                    "language": "M1135.131-30.772v-15.704c-10.469-1.451-21.127-2.207-32.038-2.207-67.040 0-127.457 28.128-170.216 73.157-25.857-6.874-53.228-10.595-81.545-10.595-156.72 0-283.799 112.952-283.799 252.265s127.079 252.265 283.799 252.265c156.72 0 283.799-112.952 283.799-252.265 0-54.552-19.488-105.005-52.597-146.314-6.748-14.631-10.469-30.839-10.469-47.993 0-44.777 25.668-83.626 63.066-102.609zM92.337 729.517c-25.761-50.024-53.589-120.264-53.589-189.278s32.487-129.58 53.589-161.574c21.102-31.994 53.283-78.362 94.718-105.606 29.893-19.677 65.752-100.167-31.070-216.343-7.822-9.385 233.689 55.435 233.689 108.479 0.892 0.752 1.781 1.476 2.664 2.172 22.804 17.976 42.57 17.976 42.57 17.976 2.438 0 6.767 1.103 23.786 0 19.96-1.293 36.301-1.719 45.836-5.363l-0.063-39.842c-26.74 0-52.976 1.703-78.581 4.982-108.348-108.348-237.76-127.836-362.821-130.673v26.551c67.544 33.11 126.133 93.338 126.133 162.207 0 9.586-0.757 19.046-2.144 28.254-114.087 75.175-187.055 189.956-187.055 318.611 0 46.643 9.588 91.466 27.249 133.239 68.067 160.996 256.056 276.692 477.282 276.692 274.402 0 497.594-177.973 504.342-399.588-40.489 18.037-35.967 25.819-35.967 25.819 19.666 51.153-68.211 171.287-120.304 213.605-34.813 28.254-124.333 78.853-170.371 94.683-49.003 16.839-158.625 28.546-242.027 21.923s-156.488-29.386-201.791-57.577c-35.877-22.325-65.024-42.571-105.329-77.922l-40.747-51.424z",
                    "subgenre": "M829.147 832v-832h-668.903c-52.812 0-95.558 43.008-95.558 96s42.746 96 95.558 96h605.198v768h-637.051c-70.076 0-127.41-57.6-127.41-128v-768c0-70.4 57.335-128 127.41-128h764.461v896h-63.705zM160.308 128v0h-0.064c-17.583 0-31.853-14.336-31.853-32s14.27-32 31.853-32h605.134v64h-605.071z",
                    "tag": "M765.952 785.037c8.828 8.898 20.621 13.665 33.156 13.665 12.5 0 24.294-4.767 33.121-13.665 8.898-8.828 13.806-20.621 13.806-33.227 0-12.429-4.908-24.223-13.806-33.050-17.726-17.867-48.552-17.655-66.207 0-18.326 18.255-18.326 47.916-0.071 66.278v0zM799.214 665.3c23.164 0 44.844 9.039 61.158 25.318 16.419 16.349 25.388 38.065 25.388 61.158 0 23.164-8.969 45.021-25.388 61.299-32.486 32.627-89.653 32.768-122.492 0-33.721-33.792-33.651-88.77 0.071-122.492 16.278-16.243 38.029-25.282 61.263-25.282v0zM1001.331 954.068c-3.919 4.061-9.393 5.438-14.972 5.932l-447.806-22.952c-4.908-0.353-9.569-2.33-13.030-5.932l-519.733-519.733c-3.708-3.708-5.791-8.686-5.791-13.948 0-5.297 2.083-10.417 5.791-14.124l424.819-424.678c3.849-3.919 8.898-5.932 13.983-5.932s10.134 2.013 13.983 5.932l519.804 519.662c3.46 3.46 5.438 8.121 5.791 13.030l22.952 447.735c0.282 5.544-1.766 11.158-5.791 15.007v0zM944.87 500.966l-500.206-500.277-396.676 396.747 500.206 500.136 418.216 21.575-21.539-418.18z",
                    "book": "M424.363 539.179c-72.235 55.851-160.213 115.029-298.667 126.251l298.667-126.251zM424.363 411.179c-72.235 55.851-160.213 115.029-298.667 126.251l298.667-126.251zM296.32 364.758c-47.573 22.315-103.083 39.211-170.624 44.672l170.624-44.672zM556.971 539.179l298.667 126.251c-138.453-11.221-226.432-70.443-298.667-126.251zM556.971 411.179l298.667 126.251c-138.453-11.221-226.432-70.443-298.667-126.251zM855.637 409.43c-67.541-5.461-123.051-22.315-170.624-44.672l170.624 44.672zM940.971 923.179c-186.88 0-357.931-87.253-444.373-156.331h-11.819c-86.485 69.077-257.536 156.331-444.416 156.331h-40.363v-810.667h40.363c138.069 0 291.115-53.163 359.168-104.491 20.224-15.317 38.699-31.317 54.955-47.616l34.176-31.36h4.011l34.176 31.36c16.256 16.299 34.731 32.299 54.955 47.616 68.053 51.328 221.099 104.491 359.168 104.491h40.363v810.667h-40.363zM469.333 63.104c0 4.352-10.411 8.747-16.043 13.013-71.381 53.803-239.957 110.763-367.957 120.32v639.659c170.667-13.056 309.888-95.957 370.389-156.245l11.563-12.672h2.048v-604.075zM896 196.438c-128-9.557-296.576-66.517-367.957-120.32-5.632-4.267-16.043-8.704-16.043-13.013v604.075h2.091l11.563 12.672c60.459 60.288 199.68 143.189 370.347 156.245v-639.659z",
                    "book2": "M512 768c0 0-128 128-512 128v-768c388 0 512-128 512-128s124 128 512 128v768c-384 0-512-128-512-128zM128 768c162.688-13.632 262.496-51.264 320-81.76v-515.488c-57.504 30.368-157.312 68-320 81.76v515.488zM896 252.512c-162.752-13.76-262.496-51.328-320-81.76v515.488c57.504 30.496 157.248 68.128 320 81.76v-515.488z",
                    "book3": "M768 384h-128c-34 0-64-32-64-64h256c0 34-32 64-64 64zM713 800c-167 0-209-32-233-56-24 24-66 56-233 56s-247-46-247-78v-586c29 16 119 48 214 56 115 9 234-9 234-32 0-16 8-31 31-32 0 0 0 0 1 0 0 0 0 0 1 0 23 1 31 16 31 32 0 23 119 41 234 32 94-7 185-40 214-56v586c0 32-80 78-247 78zM448 228c-30 16-103 28-192 28s-170-12-192-27c0 0 0 411 0 443s64 59 192 59 192-27 192-59 0-444 0-444zM896 229c-22 15-103 27-192 27s-162-12-192-28c0 0 0 412 0 444s64 59 192 59 192-27 192-59 0-443 0-443zM768 512h-128c-34 0-64-32-64-64h256c0 34-32 64-64 64zM768 640h-128c-34 0-64-32-64-64h256c0 34-32 64-64 64zM320 512h-128c-32 0-64-30-64-64h256c0 32-30 64-64 64zM320 384h-128c-32 0-64-30-64-64h256c0 32-30 64-64 64zM320 640h-128c-32 0-64-30-64-64h256c0 32-30 64-64 64z",
                    "type": "M948.148 960h-796.444c-87.338 0-151.704-59.926-151.704-151.704v-530.963c0-58.798 95.639-74.203 151.704-75.852v-265.481l417.185 265.481h379.259c87.338 1.649 151.704 61.575 151.704 151.704v455.111c0 91.777-64.365 151.704-151.704 151.704v0zM1061.926 315.259c0-27.182-58.469-91.17-75.852-75.852h-417.185l-379.259-265.481v265.481h-113.778c-13.727-15.318-37.926 8.789-37.926 37.926v568.889c0 32.494 61.31 75.852 75.852 75.852h872.296c17.383 0 75.852-56.153 75.852-75.852v-530.963zM151.704 770.37h644.741v-113.778h-644.741v113.778zM151.704 580.741h834.37v-37.926h-834.37v37.926zM151.704 466.963h834.37v-37.926h-834.37v37.926zM151.704 353.185h417.185v-37.926h-417.185v37.926z",
                    "collector": "M737.28 488.96c0-16.64-5.404-31.040-16.213-43.2s-23.609-18.24-38.4-18.24h-218.453c-14.791 0-27.591 6.080-38.4 18.24s-16.213 26.56-16.213 43.2c0 16.64 5.404 31.040 16.213 43.2s23.609 18.24 38.4 18.24h218.453c14.791 0 27.591-6.080 38.4-18.24s16.213-26.56 16.213-43.2zM696.32 488.96c0 5.547-4.053 10.347-12.16 14.4s-17.707 6.080-28.8 6.080h-163.84c-11.093 0-20.693-2.027-28.8-6.080s-12.16-8.853-12.16-14.4c0-5.547 4.053-10.347 12.16-14.4s17.707-6.080 28.8-6.080h163.84c11.093 0 20.693 2.027 28.8 6.080s12.16 8.853 12.16 14.4zM1105.92-20.631v650.541c0 11.746-4.222 21.911-12.667 30.494s-18.444 12.875-30 12.875h-938.667c-11.556 0-21.556-4.292-30-12.875s-12.667-18.748-12.667-30.494v-650.541c0-11.746 4.222-21.911 12.667-30.494s18.444-12.875 30-12.875h938.667c11.556 0 21.556 4.292 30 12.875s12.667 18.748 12.667 30.494zM1064.96 15.511c0-10.441-3.884-19.476-11.653-27.106s-16.969-11.445-27.6-11.445h-863.573c-10.631 0-19.831 3.815-27.6 11.445s-11.653 16.665-11.653 27.106v578.259c0 10.441 3.884 19.476 11.653 27.106s16.969 11.445 27.6 11.445h863.573c10.631 0 19.831-3.815 27.6-11.445s11.653-16.665 11.653-27.106v-578.259zM0 878.158v-163.996c0-45.523 36.554-81.842 81.645-81.842h1024.55c44.793 0 81.645 36.642 81.645 81.842v163.996c0 45.523-36.554 81.842-81.645 81.842h-1024.55c-44.793 0-81.645-36.642-81.645-81.842zM40.96 878.458c0 22.413 18.273 40.582 40.672 40.582h1024.576c22.462 0 40.672-18.472 40.672-40.582v-164.595c0-22.413-18.273-40.582-40.672-40.582h-1024.576c-22.462 0-40.672 18.472-40.672 40.582v164.595z",
                    
                    "raadsel": "M512 682.667q70 0 120-50t50-120q0-54-64-111t-64-103h-84q0 46 20 79t44 48 44 37 20 50q0 34-26 59t-60 25-60-25-26-59h-84q0 70 50 120t120 50zM512 84.667q140 0 241 101t101 241-101 241-241 101-241-101-101-241 101-241 241-101zM512 852.667q176 0 301-125t125-301-125-301-301-125-301 125-125 301 125 301 301 125zM470 170.667v86h84v-86h-84z",
                    "personal narrative": "M16-63.456c8.576-2.144 17.344 2.816 19.584 11.328 32.96 122.976 166.912 154.848 246.976 173.92 20.064 4.768 35.904 8.544 46.208 12.992 91.2 39.584 120.928 103.264 129.824 149.728 1.088 5.6-0.928 11.36-5.28 15.136-47.488 40.992-87.552 102.528-112.832 173.312-0.704 2.016-1.824 3.872-3.296 5.472-33.44 36.352-52.64 74.784-52.64 105.408 0 17.888 6.752 29.888 21.952 38.944 4.64 2.784 7.552 7.68 7.776 13.056 7.072 163.008 123.168 291.328 265.568 292.16 0.16 0 3.264-0.224 3.424-0.224 143.104-1.984 258.464-133.056 262.592-298.368 0.128-4.576 2.176-8.864 5.696-11.808 10.016-8.48 14.688-19.232 14.688-33.824 0-25.632-13.664-57.152-38.432-88.704-1.184-1.504-2.080-3.232-2.688-5.056-25.6-81.152-71.552-152.8-126.016-196.64-4.608-3.712-6.784-9.664-5.696-15.456 8.896-46.432 38.624-110.080 129.824-149.728 10.784-4.672 27.52-8.32 48.736-12.896 79.264-17.152 211.904-45.92 244.448-167.424 1.92-7.136 8.384-11.84 15.424-11.84 1.376 0 2.752 0.192 4.16 0.544 8.544 2.304 13.6 11.072 11.328 19.616-37.6 140.384-187.872 172.928-268.576 190.4-18.72 4.064-34.88 7.552-42.752 11.008-59.52 25.856-96.192 65.248-109.152 117.28 55.264 47.456 101.504 120.672 127.936 202.784 28.064 36.48 43.488 74.048 43.488 106.144 0 21.408-6.912 39.264-20.608 53.216-7.616 179.328-135.584 320.544-294.4 322.816l-4.768 0.064c-155.936-0.832-284.448-138.336-295.68-314.56-20.032-14.72-30.208-35.36-30.208-61.568 0-37.856 21.408-83.136 58.88-124.672 25.888-71.136 66.016-133.632 113.792-177.376-12.896-52.224-49.6-91.744-109.248-117.632-7.712-3.36-23.072-7.040-40.864-11.264-81.312-19.328-232.608-55.328-270.496-196.704-2.272-8.544 2.784-17.28 11.328-19.584z",
                    "sage": "M480 132v628c0 0-86.016 72-208 72s-208-64-208-64v-636c0 0 86.016 62.016 208 62.016s208-62.016 208-62.016zM928 132v628c0 0-86.016 72-208 72s-208-64-208-64v-636c0 0 86.016 62.016 208 62.016s208-62.016 208-62.016zM992 704h-32v-608h-384v-32h-160v32h-384v608h-32v-640h384v-32h225.984l-1.984 32h384v640z",
                    "sprookje": "M256 768l-128 128h-64v-64l128-128zM320 960h64v-128h-64zM576 640h128v-64h-128zM640 832v64h-64l-128-128 64-64zM0 640h128v-64h-128zM320 384h64v-128h-64zM64 384v-64h64l128 128-64 64zM1010 78l-636.118 636.118c-18.668 18.668-49.214 18.668-67.882 0l-60.118-60.118c-18.668-18.668-18.668-49.214 0-67.882l636.118-636.118c18.668-18.668 49.214-18.668 67.882 0l60.118 60.118c18.668 18.668 18.668 49.214 0 67.882zM480 416l-192 192 64 64 192-192-64-64z",
                    "mop": "M512-64c282.77 0 512 229.23 512 512s-229.23 512-512 512-512-229.23-512-512 229.23-512 512-512zM512 864c229.75 0 416-186.25 416-416s-186.25-416-416-416-416 186.25-416 416 186.25 416 416 416zM192 448v-64c0-140.8 115.2-256 256-256h128c140.8 0 256 115.2 256 256v64h-640zM384 203.012c-26.538 9.458-50.924 24.822-71.544 45.446-36.406 36.402-56.456 84.54-56.456 135.542h128v-180.988zM576 192h-128v192h128v-192zM711.544 248.458c-20.624-20.624-45.010-35.988-71.544-45.446v180.988h128c0-51.002-20.048-99.14-56.456-135.542zM225.352 576c0.002 0 0 0 0 0 9.768 0 18.108 7.056 19.724 16.69 6.158 36.684 37.668 63.31 74.924 63.31s68.766-26.626 74.924-63.31c1.616-9.632 9.956-16.69 19.722-16.69 9.768 0 18.108 7.056 19.724 16.688 1.082 6.436 1.628 12.934 1.628 19.312 0 63.962-52.038 116-116 116s-116-52.038-116-116c0-6.378 0.548-12.876 1.628-19.312 1.62-9.632 9.96-16.688 19.726-16.688zM609.352 576c0.002 0 0 0 0 0 9.77 0 18.112 7.056 19.724 16.69 6.158 36.684 37.668 63.31 74.924 63.31s68.766-26.626 74.924-63.31c1.616-9.632 9.958-16.69 19.722-16.69s18.108 7.056 19.722 16.688c1.082 6.436 1.628 12.934 1.628 19.312 0 63.962-52.038 116-116 116s-116-52.038-116-116c0-6.378 0.544-12.876 1.626-19.312 1.624-9.632 9.964-16.688 19.73-16.688z",
                    "broodjeaapverhaal": "M1024 483.45c0 73.735-59.991 133.945-133.945 133.945-7.199 0-14.18-0.654-20.942-1.745-26.833 189.355-176.702 334.207-357.549 334.207s-330.717-144.852-357.549-334.207c-6.545 1.091-13.307 1.527-20.070 1.527-73.735 0-133.945-59.991-133.945-133.945 0-71.99 57.156-131.109 128.709-133.726-5.236-22.251-8.072-44.941-8.072-68.063 0-46.246 10.689-91.187 32.068-133.29 20.288-40.14 48.866-75.916 85.297-106.458 73.299-61.519 170.594-95.552 273.343-95.552s200.262 34.034 273.779 95.768c36.431 30.541 65.225 66.318 85.297 106.458 21.161 42.105 32.068 87.042 32.068 133.29 0 23.126-2.618 45.812-8.072 68.065 71.772 2.182 129.582 61.3 129.582 133.726zM856.678 281.658c0-9.596-0.654-18.977-1.745-28.36h-686.739c-1.091 9.383-1.745 18.763-1.745 28.36 0 26.178 4.145 51.486 11.78 75.482 2.618 7.856 5.454 15.491 8.726 23.126 17.452 40.358 45.375 76.571 80.716 106.237 3.927 3.272 8.072 6.545 12.216 9.817-6.108 10.035-11.78 20.506-16.798 31.414-42.103 94.023-17.67 185.646 54.538 204.625 8.944 2.4 18.325 3.49 27.705 3.49 59.555 0 126.091-45.157 166.013-113.002 39.922 68.063 106.458 113.002 166.013 113.002 9.38 0 18.763-1.091 27.705-3.49 72.208-18.979 96.641-110.602 54.538-204.625-5.017-10.908-10.471-21.597-16.798-31.414 4.363-3.49 8.726-6.981 13.089-10.471 35.124-29.669 62.609-65.445 80.061-105.583 3.272-7.417 6.108-15.052 8.508-22.906 8.072-24.217 12.216-49.525 12.216-75.703zM339.225 207.487h506.11c-39.047-123.91-173.648-215.313-333.771-215.313s-294.722 91.403-333.771 215.313h161.432zM133.945 395.317c-48.648 0-88.133 39.487-88.133 88.133 0 48.648 39.485 88.133 88.133 88.133 5.454 0 10.908-0.436 16.143-1.527-0.218-5.017-0.218-10.035-0.218-15.271 0-13.089 0.654-25.742 1.745-38.395-9.38 6.326-20.506 11.344-33.377 14.398-12.216 2.836-24.651-4.799-27.487-17.016s4.799-24.651 17.016-27.487c37.74-8.944 50.175-52.574 50.393-53.447 0.436-1.747 1.091-3.272 1.745-4.799-1.091-1.745-1.963-3.493-3.054-5.233-4.799-8.946-9.162-17.891-12.871-26.835-3.272-0.436-6.545-0.654-10.035-0.654zM890.055 395.317c-3.709 0-7.199 0.22-10.908 0.654-3.927 8.944-8.072 17.888-12.869 26.835-1.527 2.834-3.272 5.672-4.799 8.726 0.218 0.434 0.218 0.87 0.436 1.309 0.218 0.434 12.432 44.721 50.393 53.447 12.216 2.836 19.852 15.271 17.016 27.487s-15.271 19.852-27.487 17.016c-11.344-2.618-21.379-6.981-30.105-12.216 1.091 11.998 1.525 23.997 1.525 36.213 0 5.017-0.218 10.035-0.218 15.052 5.454 1.091 11.126 1.745 17.016 1.745 48.648 0 88.133-39.485 88.133-88.133 0-48.65-39.485-88.135-88.133-88.135zM467.934 385.5c-10.253 11.998-28.36 13.309-40.358 3.052-11.998-10.251-13.307-28.36-3.054-40.358l26.396-30.759c5.672-6.545 13.744-10.035 21.815-10.035 6.545 0 13.089 2.182 18.543 6.763 11.998 10.253 13.307 28.36 3.054 40.358l-26.396 30.98zM595.552 388.772c-11.998 10.253-30.105 8.946-40.358-3.052l-26.396-30.761c-10.253-11.998-8.944-30.105 3.054-40.358 5.454-4.583 11.998-6.765 18.543-6.765 8.069 0 16.141 3.493 21.815 10.037l26.396 30.761c10.471 11.778 8.944 29.884-3.054 40.138zM463.571 525.334c0-25.663-20.804-46.466-46.466-46.466s-46.466 20.804-46.466 46.466c0 25.663 20.804 46.466 46.466 46.466s46.466-20.804 46.466-46.466zM652.491 525.334c0-25.663-20.804-46.466-46.466-46.466s-46.466 20.804-46.466 46.466c0 25.663 20.804 46.466 46.466 46.466s46.466-20.804 46.466-46.466z",
                    "limerick": "M0.484 188.702l0.385 735.787c0.009 17.394 14.070 31.431 31.405 31.431h790.718c17.287 0 31.389-14.054 31.389-31.39v-731.711c0-17.347-14.065-31.39-31.415-31.39h-90.129c-17.299 0-43.214-7.589-57.767-16.95 0 0-318.299-206.047-352.394-207.214s185.563 202.668 185.563 202.668c12.632 11.888 8.848 21.387-8.5 21.253l-467.859-3.609c-17.353-0.134-31.404 13.801-31.395 31.124zM39.119 226.063c-0.009-17.315 14.043-31.284 31.391-31.201l713.829 3.422c17.346 0.083 31.407 14.261 31.407 31.548v659.803c0 17.34-14.053 31.397-31.392 31.397h-713.479c-17.337 0-31.399-14.097-31.408-31.378l-0.347-663.592zM138.209 859.485h267.912c10.409 0 18.847-8.438 18.847-18.847v-56.54c0-10.409-8.438-18.847-18.847-18.847h-267.912c-10.409 0-18.847 8.438-18.847 18.847v56.54c0 10.409 8.438 18.847 18.847 18.847zM138.209 733.84h267.912c10.409 0 18.847-8.438 18.847-18.847v-56.54c0-10.409-8.438-18.847-18.847-18.847h-267.912c-10.409 0-18.847 8.438-18.847 18.847v56.54c0 10.409 8.438 18.847 18.847 18.847zM138.209 608.196h573.516c10.409 0 18.847-8.438 18.847-18.847v-56.54c0-10.409-8.438-18.847-18.847-18.847h-573.516c-10.409 0-18.847 8.438-18.847 18.847v56.54c0 10.409 8.438 18.847 18.847 18.847zM138.209 479.411h573.516c10.409 0 18.847-8.438 18.847-18.847v-56.54c0-10.409-8.438-18.847-18.847-18.847h-573.516c-10.409 0-18.847 8.438-18.847 18.847v56.54c0 10.409 8.438 18.847 18.847 18.847zM138.209 350.626h267.912c10.409 0 18.847-8.438 18.847-18.847v-56.54c0-10.409-8.438-18.847-18.847-18.847h-267.912c-10.409 0-18.847 8.438-18.847 18.847v56.54c0 10.409 8.438 18.847 18.847 18.847z",
                    "personal": "M889.366 222.080c-61.846 80.854-141.654 122.666-276.458 136.106-24.342 4.886-42.666 26.454-42.666 52.054 0 18.752 60.138 74.88 59.712 75.286 62.078 64.234 95.38 168.554 95.38 248.768 0 124.586-100.268 225.706-224 225.706s-224-101.12-224-225.706c0-80.64 32.426-185.6 95.146-249.814 0 0 59.946-55.488 59.946-74.218 0-27.114-20.48-49.706-46.934-52.906-132.054-13.866-210.986-55.466-272.214-135.254-17.704-23.062-27.304-69.356-27.944-94.102 0.214-6.4 0-106.666 0-106.666 0-47.146 38.186-85.334 85.334-85.334h661.334c47.146 0 85.334 38.186 85.334 85.334 0 0-0.214 100.266 0 106.666-0.622 24.746-10.242 71.040-27.97 94.080z",
                    "mythe": "M475.429 658.286q0 45.714-32 77.714t-77.714 32-77.714-32-32-77.714q0-24 10.857-47.429-23.429 10.857-47.429 10.857-45.714 0-77.714-32t-32-77.714 32-77.714 77.714-32 77.714 32 32 77.714q0 24-10.857 47.429 23.429-10.857 47.429-10.857 45.714 0 77.714 32t32 77.714zM961.714 256q0-9.714-28-37.714t-37.714-28q-5.143 0-16.286 9.143t-20.857 18.857-22 22.857-14 14.857l-54.857-54.857 125.714-125.714q16-16 16-38.857 0-24-22.286-46.286t-46.286-22.286q-22.857 0-38.857 16l-383.429 383.429q-100.571-74.857-208.571-74.857-93.143 0-151.714 58.571t-58.571 151.714q0 91.429 54.286 178.857t141.714 141.714 178.857 54.286q93.143 0 151.714-58.571t58.571-151.714q0-108-74.857-208.571l202.857-202.857 54.857 54.857q-1.714 1.714-14.857 14t-22.857 22-18.857 20.857-9.143 16.286q0 9.714 28 37.714t37.714 28q7.429 0 13.143-5.714 3.429-3.429 26.286-25.429t46.857-45.429 49.429-49.143 41.714-44.571 16.286-23.429z",
                    "lied": "M320 321.494c-25.6 12.586-54.614 19.84-85.334 19.84-106.026 0-192-85.974-192-192 0-106.048 85.974-192 192-192s192 85.952 192 192v426.666c0 23.466 19.2 42.666 42.666 42.666h362.666c23.466 0 42.666-19.2 42.666-42.666v-254.506c-25.598 12.586-54.632 19.84-85.33 19.84-106.048 0-192-85.974-192-192 0-106.048 85.952-192 192-192s192 85.952 192 192v721.066c0 26.026-20.908 46.934-46.934 46.934h-567.466c-26.028 0-46.934-20.908-46.934-46.934v-548.906z",
                    "legende": "M191.328 608.832v-160.672h225.312v-383.68h161.344v383.68h222.656v160.672h-222.656v222.656h-161.344v-222.656h-225.312z",
                    "kwispel": "M562.693 812.356c0 0-140.673 145.743-562.693 145.743v-874.455c426.416 0 562.693-145.743 562.693-145.743s136.277 145.743 562.693 145.743v874.455c-422.020 0-562.693-145.743-562.693-145.743v0zM140.673 812.356c178.796-15.522 288.486-58.37 351.683-93.093v-586.942c-63.197 34.577-172.887 77.426-351.683 93.093v586.942zM984.713 225.415c-178.866-15.667-288.486-58.443-351.683-93.093v586.942c63.197 34.723 172.817 77.571 351.683 93.093v-586.942z",
                    "exempel": "M712.76 20.028c-4.605 3.050-88.161 57.907-212.453 84.83 45.593 57.815 74.873 135.582 87.314 187.342 17.275 71.735 10.562 212.087-58.263 299.555-40.232 51.118-96.524 78.111-162.782 78.111s-122.551-27.015-162.759-78.111c-68.825-87.445-75.515-227.797-58.263-299.532 12.441-51.761 41.698-129.527 87.314-187.342-124.292-26.924-207.848-81.78-212.43-84.83-16.794-11.191-24.309-32.107-18.443-51.417 5.819-19.379 23.667-32.634 43.829-32.634h641.507c20.185 0 37.986 13.255 43.852 32.611 5.888 19.31-1.627 40.225-18.42 51.417v0zM464.336 133.273l-7.469-9.494c-54.643-62.837-125.896-62.837-180.515 0l-7.492 9.494c-63.807 80.932-95.47 187.985-81.838 290.107 12.486 98.132 68.664 200.621 179.553 200.621s167.090-102.512 179.576-200.644c13.586-102.168-17.962-209.106-81.815-290.084v0zM45.822-18.133c3.162 2.11 80.784 53.068 196.713 78.157l56.911 12.315c20.322-13.347 42.614-21.672 67.129-21.672 24.538 0 46.807 8.325 67.129 21.672l56.911-12.315c115.013-24.906 192.36-75.29 196.713-78.157h-641.507z",
                    "nogenre": "M853.333 256c-51.2 0-96.683-23.125-128-58.965l-312.491 156.245c8.491 22.955 13.824 47.488 13.824 73.387s-5.333 50.432-13.824 73.387l312.491 156.245c31.317-35.84 76.8-58.965 128-58.965 94.123 0 170.667 76.587 170.667 170.667s-76.544 170.667-170.667 170.667-170.667-76.587-170.667-170.667c0-12.245 1.408-24.149 3.883-35.669l-318.72-159.36c0.128-0.128 0.171-0.299 0.299-0.384-38.912 41.259-93.696 67.413-154.795 67.413-117.632 0-213.333-95.701-213.333-213.333s95.701-213.333 213.333-213.333c61.099 0 115.883 26.155 154.795 67.413-0.128-0.085-0.171-0.256-0.299-0.384l318.72-159.36c-2.475-11.52-3.883-23.424-3.883-35.669 0-94.080 76.544-170.667 170.667-170.667s170.667 76.587 170.667 170.667-76.544 170.667-170.667 170.667zM853.333 853.334c47.061 0 85.333-38.229 85.333-85.333s-38.272-85.333-85.333-85.333-85.333 38.229-85.333 85.333 38.272 85.333 85.333 85.333zM213.333 298.667c-70.571 0-128 57.429-128 128s57.429 128 128 128 128-57.429 128-128-57.429-128-128-128zM853.333-0c-47.061 0-85.333 38.229-85.333 85.333s38.272 85.333 85.333 85.333 85.333-38.229 85.333-85.333-38.272-85.333-85.333-85.333z",
                    "more": "M204,102c28.05,0,51-22.95,51-51S232.05,0,204,0s-51,22.95-51,51S175.95,102,204,102z M204,153c-28.05,0-51,22.95-51,51 s22.95,51,51,51s51-22.95,51-51S232.05,153,204,153z M204,306c-28.05,0-51,22.95-51,51s22.95,51,51,51s51-22.95,51-51 S232.05,306,204,306z", 
                };
                
                menuitems.enter()
                    .append("g")
        		    .append("path")
                    .attr("d", function(d){
                        if (d == "_NEXT") return subgenre_glyphs["more"];
                        else if (!d.subgenre) return subgenre_glyphs["nogenre"];
                        else return subgenre_glyphs[d.subgenre];
                    })
                    .attr('pointer-events', 'none')
                    .attr('transform', function(k, i) { 
                        return 'scale(0.002,0.002) rotate(0)';
        			})
                    .transition().duration(function(d, i){
                        return 30 * i;
                    })
                    .attr('transform', function(k, i) { 
                        return 'translate(' + ((Math.cos(i * 2 * Math.PI / amount) * (Math.max(org_r, 10) + 20)) - 10 )
                                      + ',' + ((Math.sin(i * 2 * Math.PI / amount) * (Math.max(org_r, 10) + 20)) + 10)
                                      + ')scale(-0.02,0.02) rotate(180)';
                    });
            }
            
            function updateCollectors(collectors_data){

                var symbol = d3.svg.symbol().type('diamond');

                var collector_marker = collector_layer.selectAll("path")
                    .data(collectors_data)
                    .each(transformPath);
                    
                collector_marker.enter()
                    .append("path")
                    .attr('d', symbol.size(10))
                    .attr("fill", object_colors["collector"])
                    .on("mouseover", function(d){
                        d3.select(this)
                            .transition()
                            .ease("elastic")
                            .attr("d", symbol_tri.size(function(d){
                                return Math.min((d.values.length * 50) + (map.getZoom() * 50), 2000);
                            }))
                            .style("opacity", 1);
                        map.setOptions({draggableCursor:'crosshair'});
                        tooltip.style("visibility", "visible")
                            .text(d.values[0].administrative_area_level_1 + " - " + d.values[0].locality + ": " + d.values.length);
                        
                    })
                    .on("mouseout", function(d){
                        var symbol = d3.svg.symbol().type('diamond'); //Need to re-initiate?
                        d3.select(this)
                            .transition()
                            .ease("elastic")
                            .attr("d", symbol_tri.size(function(d){
                                    return Math.min((d.values.length * 50) + (map.getZoom() * 5), 1000);
                            }))
                            .style("opacity", vm.opacity_collectors()); //get the opacity value from the slider again
                        map.setOptions({draggableCursor:'default'});
                        tooltip.style("visibility", "hidden");
                    })
                    .on("click", function(d){
                        info_click_tip.style("visibility", "visible")
                            .style("top", (event.pageY-25)+"px")
                            .style("left",(event.pageX+10)+"px")
                            .html(function(){
                                var return_this = "Vertellers:<br>";
                                d.values.forEach(function(item){
                                    return_this += "<a target=\"vb\" href=\"http://www.verhalenbank.nl/items/show/" + item.id + "\">" + item.title + "</a><br>";
                                })
                                return return_this;
                            })
                    })
                    .on("mousemove", function(){
                        tooltip.style("top", (event.pageY-10)+"px")
                                    .style("left",(event.pageX+10)+"px");
                    });

                //Update…
                collector_marker.transition()
                    .delay(function(d, i){
                        return i + Math.sqrt(d.values.length) * 20;
                    })
                    .duration(1500)
                    .attr("d", symbol.size(function(d){
                        if (vm.bubbles_same_size()){
                            return (map.getZoom() * 5) + 60;
                        }
                        return Math.min((d.values.length * 50) + (map.getZoom() * 5), 1000);
                    }))
                    .attr("fill", function(d){
                        return object_colors["collector"];
                    })
                    .style("opacity", function(){
                        return vm.opacity_collectors();
                    })
                    .style("visibility", function() {
                        return vm.show_collectors() ? "visible" : "hidden";
                    });
                    
                //exit
                collector_marker.exit()
                    .transition()
                    .duration(1000)
                    .attr("d", 0)
                    .attr("opacity", 0)
                    .remove();
            }
            
            function updateCreators(creators_data){
                
                var symbol_tri = d3.svg.symbol().type('triangle-down');
                
                var creator_marker = creator_layer.selectAll("path")
                    .data(creators_data)
                    .each(transformPath);

                creator_marker.enter()
                    .append("path")
                    .attr('d', symbol_tri.size(10))
                    .attr("fill", object_colors["creator"])
                    .on("mouseover", function(d){
                        d3.select(this)
                            .transition()
                            .ease("elastic")
                            .attr("d", symbol_tri.size(function(d){
                                return Math.min((d.values.length * 50) + (map.getZoom() * 50), 2000);
                            }))
                            .style("opacity", 1);
                        map.setOptions({draggableCursor:'crosshair'});
                        tooltip.style("visibility", "visible")
                            .text(d.values[0].administrative_area_level_1 + " - " + d.values[0].locality + ": " + d.values.length);

                    })
                    .on("mouseout", function(d){
                        var symbol_tri = d3.svg.symbol().type('triangle-down'); //Need to re-initiate?
                        d3.select(this)
                            .transition()
                            .ease("elastic")
                            .attr("d", symbol_tri.size(function(d){
                                    return Math.min((d.values.length * 50) + (map.getZoom() * 5), 1000);
                            }))
                            .style("opacity", vm.opacity_creators()); //get the opacity value from the slider again
                        map.setOptions({draggableCursor:'default'});
                        tooltip.style("visibility", "hidden");
                    })
                    .on("click", function(d){
                        info_click_tip.style("visibility", "visible")
                            .style("top", (event.pageY-25)+"px")
                            .style("left",(event.pageX+10)+"px")
                            .html(function(){
                                var return_this = "Vertellers:<br>";
                                d.values.forEach(function(item){
                                    var title = "Verteller prive";
                                    if (item.privacy_required == "nee"){ title = item.title; }
                                    return_this += "<a target=\"vb\" href=\"http://www.verhalenbank.nl/items/show/" + item.id + "\">" + title + "</a><br>";
                                })
                                return return_this;
                            })
                        // search tales from these creators
                    })
                    .on("mousemove", function(){
                        tooltip.style("top", (event.pageY-10)+"px")
                                    .style("left",(event.pageX+10)+"px");
                    });
                
                //Update…
                creator_marker.transition()
                    .delay(function(d, i){
                        return i + Math.sqrt(d.values.length) * 20;
                    })
                    .duration(1500)
                    .attr("d", symbol_tri.size(function(d){
                        if (vm.bubbles_same_size()){
                            return (map.getZoom() * 5) + 60;
                        }
                        return Math.min((d.values.length * 50) + (map.getZoom() * 5), 1000);
                    }))
                    .attr("fill", function(d){
                        if (vm.bubbles_color_intensity()){
                            return d3.rgb((Math.log(d.values.length) * 100), 255 - (Math.log(d.values.length) * 70), 255 - (Math.log(d.values.length) * 70));
                        }
                        return object_colors["creator"];
                    })
                    .style("opacity", function(){
                        return vm.opacity_creators();
                    })
                    .style("visibility", function() {
                        return vm.show_creators() ? "visible" : "hidden";
                    });

                //exit
                creator_marker.exit()
                    .transition()
                    .duration(1000)
                    .attr("d", 0)
                    .attr("opacity", 0)
                    .remove();
            }
            
            function updateLocations(locality_data){

                //remove the menu when data is updated
                object_layer.selectAll(".menuitems").transition().duration(500).remove();
                
                //init locations
                var locality_marker = locatie_layer.selectAll("circle")
                    .data(locality_data)
                    .each(transform2);

                //location enter
                locality_marker.enter()
                    .append("circle")
                    .each(transform2)
                    .attr("class", "location")
                    .attr("r", 0)
//                    .attr("fill", object_colors["locality"])
                    .on("mouseover", function(d){
                        map.setOptions({draggableCursor:'crosshair'});
                        d3.select(this)
                            .transition()
                            .ease("elastic")
                            .attr("r", function(d){
                                return Math.sqrt(d.values.length) + 25;
                            })
                            .style("stroke-width", "2px")
                            .style("stroke-style", "solid")
                            .style("stroke", "brown")
                            .style("opacity", 1);
                        tooltip.style("visibility", "visible")
                            .text(d.values[0].locality + ": " + d.values.length);
//                            .text(d.values[0].country + " - " + d.values[0].administrative_area_level_1 + " - " + d.values[0].locality + ": " + d.values.length);
                    })
                    .on("mouseout", function(d){
                        map.setOptions({draggableCursor:'default'});
                        d3.select(this)
                            .transition()
                            .attr("r", function(d){
                                if (vm.bubbles_same_size()){
                                    return map.getZoom() + 1;
                                }
                                return (Math.sqrt(d.values.length) * bubble_sizes_multiplier) + map.getZoom(); //sqrt so circles don't get too large
                            })
                            .style("opacity", vm.opacity_locations()) //get the opacity value from the slider again
                            .style("stroke-width", "")
                            .style("stroke-style", "")
                            .style("stroke", "");
                        tooltip.style("visibility", "hidden");
                    })
                    .on("mousemove", function(){
                        tooltip.style("top", (event.pageY-10)+"px")
                               .style("left",(event.pageX+10)+"px");
                    })
                    .on("click", function(d){
                        vm.selected_location(d.key);
                        loadmenu(this, d);
                    }) //load the circular menu.
                    .transition()
                    .duration(200)
                    .delay(function(d, i){
                        return 2000 - Math.sqrt(d.values.length) * 40; //largest first!
                    })
                    .attr("r", function(d){
                        return 100;
                        return Math.sqrt(d.values.length/2) + map.getZoom(); //sqrt so circles don't get too large
                    });

                //Update…
                locality_marker.transition()
                    .delay(function(d, i){
                        return i + Math.sqrt(d.values.length) * 20;
                    })
                    .duration(500)
                    .attr("r", function(d){
                        if (vm.bubbles_same_size()){
                            return map.getZoom() + 1;
                        }
                        return (Math.sqrt(d.values.length) * bubble_sizes_multiplier) + map.getZoom(); //sqrt so circles don't get too large
                    })
                    .style("opacity", vm.opacity_locations())
                    .style("visibility", function() {
                                    return vm.show_locations() ? "visible" : "hidden";
                    })
                    .attr("fill", function(d){
                        if (vm.bubbles_color_intensity()){
//                                return d3.rgb((Math.log(d.values.length) * 35), 0, 0);
                                return d3.rgb(255, 255 - (Math.log(d.values.length) * 35), 155 - (Math.log(d.values.length) * 35));
//                                return d3.rgb((Math.log(d.values.length) * 35), 155 - (Math.log(d.values.length) * 35), 155 - (Math.log(d.values.length) * 35));
                        }
                        console.log(d);
                        return object_colors["locality"];
                    });
                    
                //exit
                locality_marker.exit()
                    .transition()
                    .duration(1000)
                    .attr("r", 0)
                    .attr("opacity", 0)
                    .remove();
            }

            //MEE VERDER!!!!
            function updateNELocations(ne_locality_data){

                var ne_locality_marker = ne_locatie_layer.selectAll("polygon")
                    .data(ne_locality_data)
                    .each(transformPath);
                
                //location enter
                ne_locality_marker.enter()
                    .append("polygon")
                    .attr("points", function(d){ return CalculateStarPoints(5, 1, d); })
                    .attr("class", "ne_location")
                    .attr("fill", object_colors["ne_locality"])
                    .style("opacity", vm.opacity_ne_locations())
                    .on("mouseover", function(d){
                        map.setOptions({draggableCursor:'crosshair'});
                        d3.select(this)
                            .transition()
                            .duration(1500)
                            .ease("elastic")
                            .attr("points", function(d){ return CalculateStarPoints(12, 1, d); })
                            .style("opacity", 1);
                        tooltip.style("visibility", "visible")
                            .text(d.values[0].country + " - " + d.values[0].administrative_area_level_1 + " - " + d.values[0].locality + ": " + d.values.length);
                    })
                    .on("mouseout", function(d){
                        map.setOptions({draggableCursor:'default'});
                        d3.select(this)
                            .transition()
                            .duration(1500)
                            .ease("elastic")
                            .attr("points", function(d){ return CalculateStarPoints(5, 1, d); })
                            .style("opacity", vm.opacity_ne_locations()); //get the opacity value from the slider again
                        tooltip.style("visibility", "hidden");
                    })
                    .on("mousemove", function(){
                        tooltip.style("top", (event.pageY-10)+"px")
                                    .style("left",(event.pageX+10)+"px");
                    })
                    .on("click", function(d){
                        info_click_tip.style("visibility", "visible")
                            .style("top", (event.pageY-25)+"px")
                            .style("left",(event.pageX+10)+"px")
                            .html(function(){
                                var return_this = "<font size='1'>";
                                return_this += incidentList(d.values[0]);
                                return_this += "</font><br>";
                                return_this += "Volksverhalen (" +  + d.values.length + "):<br>";
                                d.values.forEach(function(item){
                                    return_this += "<a target=\"vb\" href=\"http://www.verhalenbank.nl/items/show/" + item.id + "\">" + item.identifier + " - " + item.title + "</a><br>";
                                });
                                return return_this;
                            })
                    });


                function incidentList(qwert){
                    var full_list = ""
                    for(x in qwert){
                        full_list += x + ": " + qwert[x] + '<br>';
                    }
                    return full_list;
                }

                //Update…
                ne_locality_marker.transition()
                    .delay(function(d, i){
                        return i + Math.sqrt(d.values.length) * 20;
                    })
                    .duration(500)
                    .style("opacity", vm.opacity_ne_locations())
                    .style("visibility", function() {
                                    return vm.show_ne_locations() ? "visible" : "hidden";
                    })
                    .attr("fill", function(d){
                        if (vm.bubbles_color_intensity()){
                                return d3.rgb(255, 255 - (Math.log(d.values.length) * 35), 65 - (Math.log(d.values.length) * 35));
                        }
                        return object_colors["ne_locality"];
                    });

                //exit
                ne_locality_marker.exit()
                    .transition()
                    .duration(1000)
                    .attr("r", 0)
                    .attr("opacity", 0)
                    .remove();
            }

            function cloudViewing(cloud_view){
                if (cloud_view){
                    d3.selectAll(".location")
                        .transition()
                        .duration(2000)
                        .attr("cx", function(d,i){
                            return ((i*4) + 4300) + "px" ;
                        })
                        .attr("cy",  function(d,i){
                            return ((Math.random() * 100) + 4200) + "px" ;
                        });
                        
                }
                else{
                    updateLocations(vm.location_results());
                }
            }
            
            //settings subscriptions
            //data subscriptions
            vm.location_results.subscribe( function (){
                updateLocations(vm.location_results());
            });
            vm.creator_results.subscribe( function (){
                updateCreators(vm.creator_results());
            });
            vm.collector_results.subscribe( function (){
                updateCollectors(vm.collector_results());
            });
            vm.ne_location_results.subscribe( function (){
                updateNELocations(vm.ne_location_results());
            });
            
            //settings
            vm.bubbles_same_size.subscribe( function (){
                updateLocations(vm.location_results());
                updateCreators(vm.creator_results());
                updateNELocations(vm.ne_location_results());
            });
            vm.bubbles_color_intensity.subscribe( function (){
                updateLocations(vm.location_results());
                updateCreators(vm.creator_results());
                updateCollectors(vm.collector_results());
                updateNELocations(vm.ne_location_results());
            });
            //opacity subscriptions
            vm.opacity_locations.subscribe( function (){
                updateLocations(vm.location_results());
            });
            vm.opacity_creators.subscribe( function (){
                updateCreators(vm.creator_results());
            });
            vm.opacity_collectors.subscribe( function (){
                updateCollectors(vm.collector_results());
            });
            vm.opacity_ne_locations.subscribe( function (){
                updateNELocations(vm.ne_location_results());
            });
            //show subscriptions
            vm.show_locations.subscribe( function (){
                vm.doLocationSearch() //more data expensive
            });
            vm.show_creators.subscribe( function (){
                updateCreators(vm.creator_results());
            });
            vm.show_collectors.subscribe( function (){
                updateCollectors(vm.collector_results());
            });
            vm.show_ne_locations.subscribe( function (){
                updateNELocations(vm.ne_location_results());
            });

            //cloud
            vm.cloud_view.subscribe( function(){
                cloudViewing(vm.cloud_view());
            });
            // Draw each marker as a separate SVG element.
            // We could use a single SVG, but what size would it have?
            // here we keep track of all changes in the viewmodel
            overlay.draw = function() {
                //data updaters
                updateLocations(vm.location_results());
//                updateCreators(vm.creator_results());
//                updateCollectors(vm.collector_results());
//                updateNELocations(vm.ne_location_results());

                //google event listeners
                google.maps.event.addListener(map, 'zoom_changed', function() {
                    object_layer.selectAll(".menuitems").remove();
                });
                google.maps.event.addListener(map, 'center_changed', function() {
                    info_click_tip.style("visibility", "hidden");
                });
                google.maps.event.addListener(map, 'click', function() {
                    //Some code for clicking outside of menu items
                });
            }
        }
    };
    // Bind our overlay to the map¦
    overlay.setMap(map);
}